//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainFrameBaseClass::MainFrameBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer1);
    
    m_mainPanel = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    
    boxSizer1->Add(m_mainPanel, 1, wxEXPAND, 5);
    
    m_menuBar = new wxMenuBar(0);
    this->SetMenuBar(m_menuBar);
    
    m_name6 = new wxMenu();
    m_menuBar->Append(m_name6, _("Unit Operations"));
    
    m_menuItem17 = new wxMenuItem(m_name6, wxID_ANY, _("Manual Robot"), wxT(""), wxITEM_NORMAL);
    m_name6->Append(m_menuItem17);
    
    m_menuItem19 = new wxMenuItem(m_name6, wxID_ANY, _("Inspection Camera"), wxT(""), wxITEM_NORMAL);
    m_name6->Append(m_menuItem19);
    
    m_menuItem7 = new wxMenuItem(m_name6, wxID_EXIT, _("Exit\tAlt-X"), _("Quit"), wxITEM_NORMAL);
    m_name6->Append(m_menuItem7);
    
    m_name8 = new wxMenu();
    m_menuBar->Append(m_name8, _("Help"));
    
    m_menuItem9 = new wxMenuItem(m_name8, wxID_ABOUT, _("About..."), wxT(""), wxITEM_NORMAL);
    m_name8->Append(m_menuItem9);
    
    m_mainToolbar = this->CreateToolBar(wxTB_FLAT, wxID_ANY);
    m_mainToolbar->SetToolBitmapSize(wxSize(16,16));
    
    SetSizeHints(500,300);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    this->Connect(m_menuItem17->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnManualRobot_Frame), NULL, this);
    this->Connect(m_menuItem19->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnInspectionCamera_Frame), NULL, this);
    this->Connect(m_menuItem7->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Connect(m_menuItem9->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    
}

MainFrameBaseClass::~MainFrameBaseClass()
{
    this->Disconnect(m_menuItem17->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnManualRobot_Frame), NULL, this);
    this->Disconnect(m_menuItem19->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnInspectionCamera_Frame), NULL, this);
    this->Disconnect(m_menuItem7->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Disconnect(m_menuItem9->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    
}

ManualRobotFrameBaseClass::ManualRobotFrameBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer13 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer13);
    
    m_button15 = new wxButton(this, wxID_ANY, _("Print Message"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer13->Add(m_button15, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    SetMinSize( wxSize(480,480) );
    SetSizeHints(500,300);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(ManualRobotFrameBaseClass::OnClose), NULL, this);
    m_button15->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ManualRobotFrameBaseClass::OnPrintMessage), NULL, this);
    
}

ManualRobotFrameBaseClass::~ManualRobotFrameBaseClass()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(ManualRobotFrameBaseClass::OnClose), NULL, this);
    m_button15->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ManualRobotFrameBaseClass::OnPrintMessage), NULL, this);
    
}

InspectionCameraFrameBaseClass::InspectionCameraFrameBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxGridSizer* gridSizer49 = new wxGridSizer(  2, 2, 10, 10);
    this->SetSizer(gridSizer49);
    
    m_staticBitmap36 = new wxStaticBitmap(this, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxSize(640,480), 0 );
    m_staticBitmap36->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    gridSizer49->Add(m_staticBitmap36, 0, wxALL, 5);
    m_staticBitmap36->SetMinSize(wxSize(640,480));
    
    wxBoxSizer* boxSizer42 = new wxBoxSizer(wxVERTICAL);
    
    gridSizer49->Add(boxSizer42, 0, wxALIGN_RIGHT, 5);
    
    wxArrayString m_choice51Arr;
    m_choice51 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxSize(100,30), m_choice51Arr, 0);
    
    boxSizer42->Add(m_choice51, 0, wxALL, 5);
    m_choice51->SetMinSize(wxSize(100,30));
    
    m_button44 = new wxButton(this, wxID_ANY, _("Start"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer42->Add(m_button44, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_button46 = new wxButton(this, wxID_ANY, _("Properties"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer42->Add(m_button46, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    SetMinSize( wxSize(800,600) );
    SetSizeHints(800,600);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(InspectionCameraFrameBaseClass::OnClose), NULL, this);
    
}

InspectionCameraFrameBaseClass::~InspectionCameraFrameBaseClass()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(InspectionCameraFrameBaseClass::OnClose), NULL, this);
    
}
